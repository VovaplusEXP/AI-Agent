#!/usr/bin/env python3
"""
–¢–µ—Å—Ç hotfix v2.1.2: JSON –ø–∞—Ä—Å–∏–Ω–≥ + –ø—É—Ç–∏ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ AI –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

def test_json_cleaning():
    """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ escape-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –≤ JSON"""
    print("="*70)
    print("–¢–ï–°–¢ 1: –û—á–∏—Å—Ç–∫–∞ escape-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")
    print("="*70)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç Gemma —Å —Ç—Ä–æ–π–Ω—ã–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    raw_response = r'{"thought": "test", "action": {"tool_name": "write_file", "parameters": {"file_path": "test.py", "content": "import re\n\nstring = input(\"Enter text:\\\")\nprint(string)"}}}'
    
    print(f"\n1. –ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç Gemma:")
    print(f"   {raw_response[:100]}...")
    print(f"\n   –ü—Ä–æ–±–ª–µ–º–∞: \\\" –≤–Ω—É—Ç—Ä–∏ content (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å \\\")")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –∫–∞–∫ –≤ agent.py
    cleaned = raw_response
    
    # –®–∞–≥ 1: \\\" ‚Üí \"
    cleaned = cleaned.replace('\\\\\"', '\\"')
    print(f"\n2. –ü–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã \\\\\" ‚Üí \\\":")
    print(f"   {cleaned[:100]}...")
    
    # –®–∞–≥ 2: \\\\ ‚Üí \\
    cleaned = cleaned.replace('\\\\', '\\')
    print(f"\n3. –ü–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã \\\\\\\\ ‚Üí \\\\:")
    print(f"   {cleaned[:100]}...")
    
    # –ü–∞—Ä—Å–∏–º JSON
    import json
    try:
        parsed = json.loads(cleaned)
        print(f"\n‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω!")
        print(f"   content: {parsed['action']['parameters']['content'][:50]}...")
        return True
    except json.JSONDecodeError as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return False


def test_paths():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Ç–µ–π –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    print("\n" + "="*70)
    print("–¢–ï–°–¢ 2: –ü—É—Ç–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∞–≥–µ–Ω—Ç–∞")
    print("="*70)
    
    from pathlib import Path
    import tempfile
    import shutil
    
    # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞
    test_dir = Path(tempfile.mkdtemp(prefix="agent_test_"))
    print(f"\n–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {test_dir}")
    
    # –°–æ–∑–¥–∞—ë–º —Ñ–µ–π–∫–æ–≤—ã–π agent.py
    fake_agent_dir = test_dir / "AI"
    fake_agent_dir.mkdir()
    fake_agent_file = fake_agent_dir / "agent.py"
    fake_agent_file.write_text("# fake agent")
    
    try:
        # –ú–µ–Ω—è–µ–º CWD –Ω–∞ –¥—Ä—É–≥—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é (—Å–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –∏–∑ /home/vova/testsand)
        original_cwd = Path.cwd()
        other_dir = test_dir / "other_location"
        other_dir.mkdir()
        os.chdir(other_dir)
        
        print(f"–¢–µ–∫—É—â–∏–π CWD: {Path.cwd()}")
        print(f"–§–∞–π–ª –∞–≥–µ–Ω—Ç–∞: {fake_agent_file}")
        print(f"CWD != –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∞–≥–µ–Ω—Ç–∞ ‚úì")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ Agent —Å Path(__file__).parent
        # __file__ –±—ã–ª –±—ã = fake_agent_file
        project_root = fake_agent_file.parent.resolve()  # /tmp/.../AI
        logs_dir = project_root / "logs"
        chats_dir = project_root / "chats"
        memory_dir = project_root / "memory"
        
        # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        logs_dir.mkdir(exist_ok=True)
        chats_dir.mkdir(exist_ok=True)
        memory_dir.mkdir(exist_ok=True)
        
        print(f"\n–°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—É—Ç–∏:")
        print(f"  logs:   {logs_dir}")
        print(f"  chats:  {chats_dir}")
        print(f"  memory: {memory_dir}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω–∏ —Å–æ–∑–¥–∞–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ agent.py, –∞ –ù–ï –≤ CWD
        assert logs_dir.parent == fake_agent_dir, "logs –Ω–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ agent.py!"
        assert chats_dir.parent == fake_agent_dir, "chats –Ω–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ agent.py!"
        assert memory_dir.parent == fake_agent_dir, "memory –Ω–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ agent.py!"
        assert fake_agent_dir != Path.cwd(), "–¢–µ—Å—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: agent_dir == cwd"
        
        print(f"\n‚úÖ –í—Å–µ –ø—É—Ç–∏ —Å–æ–∑–¥–∞–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ agent.py")
        print(f"   agent_dir = {fake_agent_dir}")
        print(f"   cwd = {Path.cwd()}")
        print(f"   agent_dir != cwd ‚úì")
        
        os.chdir(original_cwd)
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        os.chdir(original_cwd)
        return False
    finally:
        shutil.rmtree(test_dir)


if __name__ == "__main__":
    print("\nüöÄ HOTFIX v2.1.2 - –¢–µ—Å—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π\n")
    
    result1 = test_json_cleaning()
    result2 = test_paths()
    
    print("\n" + "="*70)
    if result1 and result2:
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´")
        sys.exit(0)
    else:
        print("‚ùå –ï–°–¢–¨ –û–®–ò–ë–ö–ò")
        sys.exit(1)
    print("="*70 + "\n")
