"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.
–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã, —á–∏—Ç–∞–µ—Ç –∏—Ö —á–µ—Ä–µ–∑ read_file, –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
"""
import os
import sys
import tempfile
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent))

import tools


def create_demo_image(filepath: str):
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º."""
    try:
        from PIL import Image, ImageDraw, ImageFont
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 800x600
        img = Image.new('RGB', (800, 600), color=(255, 255, 255))
        draw = ImageDraw.Draw(img)
        
        # –†–∏—Å—É–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç
        for y in range(600):
            color_value = int(255 * (y / 600))
            draw.rectangle([(0, y), (800, y+1)], fill=(color_value, 100, 255-color_value))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        draw.text((50, 50), "Test Image for AI Agent", fill=(0, 0, 0))
        draw.text((50, 100), "Testing image reading capability", fill=(255, 255, 255))
        
        img.save(filepath)
        return True
    except ImportError:
        print("‚ö†Ô∏è Pillow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False


def create_demo_pdf(filepath: str):
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π PDF —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏."""
    try:
        from reportlab.pdfgen import canvas
        from reportlab.lib.pagesizes import letter
        from reportlab.lib.units import inch
        
        c = canvas.Canvas(filepath, pagesize=letter)
        
        # –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1
        c.setFont("Helvetica-Bold", 24)
        c.drawString(1*inch, 10*inch, "AI Agent Test Document")
        c.setFont("Helvetica", 12)
        c.drawString(1*inch, 9.5*inch, "This is a test PDF for image reading functionality")
        c.drawString(1*inch, 9*inch, "Page 1 of 3")
        c.showPage()
        
        # –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2
        c.setFont("Helvetica-Bold", 18)
        c.drawString(1*inch, 10*inch, "Chapter 1: Introduction")
        c.setFont("Helvetica", 12)
        c.drawString(1*inch, 9.5*inch, "This document demonstrates PDF to image conversion.")
        c.drawString(1*inch, 9*inch, "Each page will be converted to a separate image.")
        c.drawString(1*inch, 8.5*inch, "Page 2 of 3")
        c.showPage()
        
        # –°—Ç—Ä–∞–Ω–∏—Ü–∞ 3
        c.setFont("Helvetica-Bold", 18)
        c.drawString(1*inch, 10*inch, "Chapter 2: Conclusion")
        c.setFont("Helvetica", 12)
        c.drawString(1*inch, 9.5*inch, "PDF reading is working correctly!")
        c.drawString(1*inch, 9*inch, "Page 3 of 3")
        c.showPage()
        
        c.save()
        return True
    except ImportError:
        print("‚ö†Ô∏è reportlab –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False


def demo_workflow():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞."""
    print("\n" + "="*80)
    print("üé¨ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ë–û–¢–´ –° –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò –ò PDF")
    print("="*80 + "\n")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    with tempfile.TemporaryDirectory() as tmpdir:
        tmpdir_path = Path(tmpdir)
        
        # === –¢–µ—Å—Ç 1: –ß—Ç–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ===
        print("üì∏ –¢–µ—Å—Ç 1: –ß—Ç–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è JPEG")
        print("-" * 60)
        
        image_path = tmpdir_path / "test_image.jpg"
        if create_demo_image(str(image_path)):
            print(f"‚úì –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path.name}")
            print(f"  –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {image_path.stat().st_size / 1024:.2f} –ö–ë")
            
            result = tools.read_file(str(image_path))
            
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç read_file():")
            print("-" * 60)
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ (–±–µ–∑ base64 –¥–∞–Ω–Ω—ã—Ö)
            result_preview = result[:500] + "..." if len(result) > 500 else result
            if "[IMAGE_DATA:" in result_preview:
                # –û–±—Ä–µ–∑–∞–µ–º base64 –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                import re
                result_preview = re.sub(r'\[IMAGE_DATA:[^\]]{50}[^\]]*\]', '[IMAGE_DATA:...truncated...]', result_preview)
            print(result_preview)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if "–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï:" in result and "[IMAGE_DATA:" in result:
                print("\n‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            else:
                print("\n‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        else:
            print("‚è≠Ô∏è –¢–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω (Pillow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
        
        print("\n")
        
        # === –¢–µ—Å—Ç 2: –ß—Ç–µ–Ω–∏–µ PDF ===
        print("üìÑ –¢–µ—Å—Ç 2: –ß—Ç–µ–Ω–∏–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        print("-" * 60)
        
        pdf_path = tmpdir_path / "test_document.pdf"
        if create_demo_pdf(str(pdf_path)):
            print(f"‚úì –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π PDF: {pdf_path.name}")
            print(f"  –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {pdf_path.stat().st_size / 1024:.2f} –ö–ë")
            
            result = tools.read_file(str(pdf_path))
            
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç read_file():")
            print("-" * 60)
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 800 —Å–∏–º–≤–æ–ª–æ–≤
            result_preview = result[:800] + "..." if len(result) > 800 else result
            if "[PAGE_" in result_preview:
                # –û–±—Ä–µ–∑–∞–µ–º base64 –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                import re
                result_preview = re.sub(r'\[PAGE_\d+_IMAGE_DATA:[^\]]{50}[^\]]*\]', '[PAGE_X_IMAGE_DATA:...truncated...]', result_preview)
            print(result_preview)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            import re
            pages = re.findall(r'\[PAGE_\d+_IMAGE_DATA:', result)
            if "PDF –î–û–ö–£–ú–ï–ù–¢:" in result and len(pages) > 0:
                print(f"\n‚úÖ PDF —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω, —Å—Ç—Ä–∞–Ω–∏—Ü –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(pages)}")
            else:
                print("\n‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è PDF")
        else:
            print("‚è≠Ô∏è –¢–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω (reportlab –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
        
        print("\n")
        
        # === –¢–µ—Å—Ç 3: –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ===
        print("üñºÔ∏è –¢–µ—Å—Ç 3: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤")
        print("-" * 60)
        
        formats = ['.png', '.bmp', '.gif']
        supported_formats = []
        
        for fmt in formats:
            test_path = tmpdir_path / f"test{fmt}"
            try:
                if create_demo_image(str(test_path)):
                    result = tools.read_file(str(test_path))
                    if "–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï:" in result:
                        supported_formats.append(fmt)
                        print(f"‚úì {fmt.upper():5s} - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            except Exception as e:
                print(f"‚úó {fmt.upper():5s} - –æ—à–∏–±–∫–∞: {e}")
        
        print(f"\n‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(supported_formats)}")
        
        print("\n")
        
        # === –¢–µ—Å—Ç 4: –û—Ü–µ–Ω–∫–∞ —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ ===
        print("üíæ –¢–µ—Å—Ç 4: –û—Ü–µ–Ω–∫–∞ —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤")
        print("-" * 60)
        
        # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        large_image_path = tmpdir_path / "large_image.png"
        try:
            from PIL import Image
            large_img = Image.new('RGB', (2048, 1536), color=(128, 128, 128))
            large_img.save(str(large_image_path))
            
            original_size = large_image_path.stat().st_size
            
            result = tools.read_file(str(large_image_path))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º base64 –¥–∞–Ω–Ω—ã–µ
            import re
            match = re.search(r'\[IMAGE_DATA:([^\]]+)\]', result)
            if match:
                optimized_base64 = match.group(1)
                optimized_size = len(optimized_base64)
                
                print(f"–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: 2048x1536, {original_size / 1024:.2f} –ö–ë")
                print(f"–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ:     512x512, {optimized_size / 1024:.2f} –ö–ë (base64)")
                
                # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
                # Vision –º–æ–¥–µ–ª–∏: ~85 —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 512x512
                estimated_tokens = 65
                print(f"\nüìä –û—Ü–µ–Ω–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤: ~{estimated_tokens} —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                print(f"   (–≤–º–µ—Å—Ç–æ ~{original_size // 40} –¥–ª—è –Ω–µ—Å–∂–∞—Ç–æ–≥–æ)")
                
                reduction = (1 - (optimized_size / original_size)) * 100
                print(f"\n‚úÖ –≠–∫–æ–Ω–æ–º–∏—è –º–µ—Å—Ç–∞: {reduction:.1f}%")
        except Exception as e:
            print(f"‚ö†Ô∏è –¢–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω: {e}")
    
    print("\n" + "="*80)
    print("‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
    print("="*80 + "\n")


if __name__ == "__main__":
    demo_workflow()
