"""
Unit-—Ç–µ—Å—Ç—ã –¥–ª—è –ø–∞—Ä—Å–µ—Ä–æ–≤ v3.0.0 (—Ñ–ª–∞–≥–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç + fallback –Ω–∞ JSON).

–ü–æ–∫—Ä—ã–≤–∞–µ—Ç:
- –ö–µ–π—Å 1: –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
- –ö–µ–π—Å 2: Regex –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–ø—Ä–æ–±–ª–µ–º–Ω—ã–π –≤ v2.1.2)
- –ö–µ–π—Å 3: JSON –≤–Ω—É—Ç—Ä–∏ –∫–æ–¥–∞
- –ö–µ–π—Å 4: –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
- –ö–µ–π—Å 5: Bash –∫–æ–º–∞–Ω–¥—ã —Å –∫–∞–≤—ã—á–∫–∞–º–∏
- Edge cases: –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –±–ª–æ–∫–æ–≤, fallback –Ω–∞ JSON
"""

import pytest
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, str(Path(__file__).parent.parent))

from parsers import parse_flagged_response, parse_json_response, parse_response_with_fallback


class TestFlaggedParser:
    """–¢–µ—Å—Ç—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–ª–∞–≥–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ v3.0.0"""
    
    def test_case_1_simple_file_creation(self):
        """–ö–µ–π—Å 1: –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å Python –∫–æ–¥–æ–º"""
        
        response = """<THOUGHT>
–ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å Python —Ñ–∞–π–ª —Å –ø—Ä–æ—Å—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
<TOOL>
write_file
<PARAMS>
{"file_path": "hello.py"}
<CONTENT>
def greet(name):
    print(f"–ü—Ä–∏–≤–µ—Ç, {name}!")

if __name__ == "__main__":
    greet("–ú–∏—Ä")
<END>"""
        
        result = parse_flagged_response(response)
        
        assert result['thought'] == "–ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å Python —Ñ–∞–π–ª —Å –ø—Ä–æ—Å—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"
        assert result['tool_name'] == "write_file"
        assert result['parameters']['file_path'] == "hello.py"
        assert 'def greet(name):' in result['parameters']['content']
        assert 'print(f"–ü—Ä–∏–≤–µ—Ç, {name}!")' in result['parameters']['content']
    
    def test_case_2_regex_patterns(self):
        """–ö–µ–π—Å 2: Regex –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–ø—Ä–æ–±–ª–µ–º–Ω—ã–π –≤ v2.1.2) üî•"""
        
        response = r"""<THOUGHT>
–°–æ–∑–¥–∞–º —Å–∫—Ä–∏–ø—Ç —Å regex –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email –∞–¥—Ä–µ—Å–æ–≤
<TOOL>
write_file
<PARAMS>
{"file_path": "validate_email.py"}
<CONTENT>
import re

def validate_email(email):
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return bool(re.match(pattern, email))

# –¢–µ—Å—Ç
test_emails = [
    "user@example.com",
    "invalid.email",
    "test+tag@domain.co.uk"
]

for email in test_emails:
    print(f"{email}: {validate_email(email)}")
<END>"""
        
        result = parse_flagged_response(response)
        
        assert result['tool_name'] == "write_file"
        assert result['parameters']['file_path'] == "validate_email.py"
        
        # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ JSON escapes —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        content = result['parameters']['content']
        assert r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$' in content
        assert r'pattern = r' in content
        assert 'import re' in content
    
    def test_case_3_json_inside_code(self):
        """–ö–µ–π—Å 3: JSON –≤–Ω—É—Ç—Ä–∏ –∫–æ–¥–∞ (–¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å escaping) üî•"""
        
        response = r"""<THOUGHT>
–°–æ–∑–¥–∞–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON
<TOOL>
write_file
<PARAMS>
{"file_path": "json_handler.py"}
<CONTENT>
import json

data = {
    "name": "John \"The Great\"",
    "path": "C:\\Users\\John\\Documents",
    "regex": r"\d+\.\d+",
    "url": "https://example.com/api?param=value"
}

json_str = json.dumps(data, indent=2)
print(json_str)
<END>"""
        
        result = parse_flagged_response(response)
        
        content = result['parameters']['content']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        assert 'John "The Great"' in content or r'John \"The Great\"' in content
        assert 'C:' in content and 'Users' in content and 'John' in content  # –ø—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
        assert r'\d+' in content or 'd+' in content  # regex –ø–∞—Ç—Ç–µ—Ä–Ω
        assert 'https://example.com' in content
    
    def test_case_4_multiline_strings(self):
        """–ö–µ–π—Å 4: –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏"""
        
        response = """<THOUGHT>
–°–æ–∑–¥–∞–º —Ñ–∞–π–ª —Å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
<TOOL>
write_file
<PARAMS>
{"file_path": "multiline.py"}
<CONTENT>
text = '''
–≠—Ç–æ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç
—Å —Ä–∞–∑–Ω—ã–º–∏ "–∫–∞–≤—ã—á–∫–∞–º–∏" –∏ '–∞–ø–æ—Å—Ç—Ä–æ—Ñ–∞–º–∏'
–∏ –¥–∞–∂–µ backslash: \\
'''

query = \"\"\"
SELECT * 
FROM users 
WHERE name = 'John' AND status != "inactive"
\"\"\"

print(text)
print(query)
<END>"""
        
        result = parse_flagged_response(response)
        
        content = result['parameters']['content']
        
        # –í—Å–µ –∫–∞–≤—ã—á–∫–∏ –∏ escapes –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è –∫–∞–∫ –µ—Å—Ç—å
        assert "'''" in content
        assert '"""' in content
        assert "WHERE name = 'John'" in content
        assert 'status != "inactive"' in content
    
    def test_case_5_bash_commands(self):
        """–ö–µ–π—Å 5: Bash –∫–æ–º–∞–Ω–¥—ã —Å –∫–∞–≤—ã—á–∫–∞–º–∏ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏"""
        
        response = """<THOUGHT>
–°–æ–∑–¥–∞–º bash —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
<TOOL>
write_file
<PARAMS>
{"file_path": "deploy.sh"}
<CONTENT>
#!/bin/bash

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
APP_DIR="/var/www/app"
BACKUP_DIR="/backup/$(date +%Y-%m-%d)"

# –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø
tar -czf "$BACKUP_DIR/app.tar.gz" "$APP_DIR"

# –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
cd "$APP_DIR" && git pull origin main

# –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å
systemctl restart myapp.service

echo "Deployment complete!"
<END>"""
        
        result = parse_flagged_response(response)
        
        content = result['parameters']['content']
        
        # –í—Å–µ bash –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º–∏
        assert '#!/bin/bash' in content
        assert 'BACKUP_DIR="/backup/$(date +%Y-%m-%d)"' in content
        assert 'tar -czf' in content
        assert 'systemctl restart' in content
    
    def test_optional_params_block(self):
        """Edge case: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–ª–æ–∫–∞ <PARAMS> (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)"""
        
        response = """<THOUGHT>
–ü—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
<TOOL>
list_files
<CONTENT>
.
<END>"""
        
        result = parse_flagged_response(response)
        
        assert result['thought'] == "–ü—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"
        assert result['tool_name'] == "list_files"
        assert result['parameters']['content'] == "."
    
    def test_optional_content_block(self):
        """Edge case: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–ª–æ–∫–∞ <CONTENT> (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)"""
        
        response = """<THOUGHT>
–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
<TOOL>
get_current_time
<PARAMS>
{"format": "ISO8601"}
<END>"""
        
        result = parse_flagged_response(response)
        
        assert result['thought'] == "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"
        assert result['tool_name'] == "get_current_time"
        assert result['parameters']['format'] == "ISO8601"
        assert 'content' not in result['parameters'] or result['parameters']['content'] == ""
    
    def test_missing_required_thought(self):
        """Edge case: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ <THOUGHT> - –ø–∞—Ä—Å–µ—Ä –¥–æ–ª–∂–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"""
        
        response = """<TOOL>
write_file
<PARAMS>
{"file_path": "test.py"}
<END>"""
        
        # –ü–∞—Ä—Å–µ—Ä v3.0.0 –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–¢ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π thought
        result = parse_flagged_response(response)
        assert result['tool_name'] == 'write_file'
        # Thought –±—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ —Ç–µ–∫—Å—Ç –¥–æ <TOOL> –∏–ª–∏ –∑–∞–≥–ª—É—à–∫–∞
        assert 'write_file' in result['thought']
    
    def test_missing_required_tool(self):
        """Edge case: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∞ <TOOL>"""
        
        response = """<THOUGHT>
–ö–∞–∫–∞—è-—Ç–æ –º—ã—Å–ª—å
<PARAMS>
{"file_path": "test.py"}
<END>"""
        
        with pytest.raises(ValueError, match="–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–ª–∞–≥ <TOOL>"):
            parse_flagged_response(response)
    
    def test_invalid_json_in_params(self):
        """Edge case: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ <PARAMS>"""
        
        response = """<THOUGHT>
–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª
<TOOL>
write_file
<PARAMS>
{broken json here}
<END>"""
        
        with pytest.raises(ValueError, match="–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ <PARAMS>"):
            parse_flagged_response(response)


class TestJSONParserLegacy:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ JSON –ø–∞—Ä—Å–µ—Ä–∞ v2.1.2 (legacy, –¥–ª—è fallback)"""
    
    def test_valid_json_with_escapes(self):
        """JSON —Ñ–æ—Ä–º–∞—Ç —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ escapes (v2.1.2 –¥–æ–ª–∂–µ–Ω —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è)"""
        
        response = """{
    "thought": "–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å regex",
    "action": {
        "tool_name": "write_file",
        "parameters": {
            "file_path": "test.py",
            "content": "pattern = r'\\d+\\.\\d+'"
        }
    }
}"""
        
        result = parse_json_response(response)
        
        assert result['thought'] == "–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å regex"
        assert result['tool_name'] == "write_file"
        assert result['parameters']['file_path'] == "test.py"
        # –û—á–∏—Å—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ escapes
        assert 'pattern' in result['parameters']['content']
    
    def test_json_in_markdown_block(self):
        """JSON –≤–Ω—É—Ç—Ä–∏ markdown –±–ª–æ–∫–∞"""
        
        response = """–í–æ—Ç –º–æ–π –æ—Ç–≤–µ—Ç:
```json
{
    "thought": "–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª",
    "action": {
        "tool_name": "write_file",
        "parameters": {
            "file_path": "hello.py"
        }
    }
}
```
–ì–æ—Ç–æ–≤–æ!"""
        
        result = parse_json_response(response)
        
        assert result['thought'] == "–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª"
        assert result['tool_name'] == "write_file"


class TestFallbackParser:
    """–¢–µ—Å—Ç—ã –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Å fallback"""
    
    def test_fallback_prefers_flagged_format(self):
        """Fallback –ø–∞—Ä—Å–µ—Ä –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç —Ñ–ª–∞–≥–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        
        response = """<THOUGHT>
–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª
<TOOL>
write_file
<PARAMS>
{"file_path": "test.py"}
<CONTENT>
print("Hello")
<END>"""
        
        result = parse_response_with_fallback(response)
        
        assert result['tool_name'] == "write_file"
        assert 'print("Hello")' in result['parameters']['content']
    
    def test_fallback_to_json_when_flags_fail(self):
        """Fallback –Ω–∞ JSON –∫–æ–≥–¥–∞ —Ñ–ª–∞–≥–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã"""
        
        response = """{
    "thought": "–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª",
    "action": {
        "tool_name": "write_file",
        "parameters": {
            "file_path": "test.py",
            "content": "print('Hello')"
        }
    }
}"""
        
        result = parse_response_with_fallback(response)
        
        assert result['thought'] == "–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª"
        assert result['tool_name'] == "write_file"
        assert result['parameters']['file_path'] == "test.py"
    
    def test_fallback_fails_on_both_formats(self):
        """Fallback –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –µ—Å–ª–∏ –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã"""
        
        response = "–ü—Ä–æ—Å—Ç–æ –∫–∞–∫–æ–π-—Ç–æ —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∞"
        
        with pytest.raises(Exception):  # JSONDecodeError –∏–ª–∏ ValueError
            parse_response_with_fallback(response)


# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if __name__ == "__main__":
    pytest.main([__file__, "-v", "--tb=short"])
