"""
–¢–µ—Å—Ç—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ PDF –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ read_file.
"""
import os
import sys
import tempfile
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent))

import tools


def create_test_image(filepath: str, size=(100, 100), color=(255, 0, 0)):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
    try:
        from PIL import Image
        img = Image.new('RGB', size, color)
        img.save(filepath)
        return True
    except ImportError:
        print("‚ö†Ô∏è Pillow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        return False


def create_test_pdf(filepath: str):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π PDF —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º."""
    try:
        from reportlab.pdfgen import canvas
        from reportlab.lib.pagesizes import letter
        
        c = canvas.Canvas(filepath, pagesize=letter)
        c.drawString(100, 750, "Test PDF Document")
        c.drawString(100, 730, "Page 1 - This is a test")
        c.showPage()
        
        c.drawString(100, 750, "Page 2")
        c.drawString(100, 730, "Second page content")
        c.showPage()
        
        c.save()
        return True
    except ImportError:
        print("‚ö†Ô∏è reportlab –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–æ–∑–¥–∞–µ–º PDF —á–µ—Ä–µ–∑ pypdfium2")
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π "PDF" –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        with open(filepath, 'w') as f:
            f.write("%PDF-1.4\nTest PDF")
        return True


def test_image_optimization():
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    print("\n=== –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ===")
    
    with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as tmp:
        tmp_path = tmp.name
    
    try:
        if not create_test_image(tmp_path, size=(800, 600), color=(0, 128, 255)):
            print("‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω (Pillow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
        img_base64 = tools._optimize_image_for_vision(tmp_path, max_size=(512, 512), quality=85)
        
        if img_base64:
            print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, base64 –¥–ª–∏–Ω–∞: {len(img_base64)}")
            print(f"   –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {len(img_base64) / 1024:.2f} KB")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ base64 –≤–∞–ª–∏–¥–Ω—ã–π
            import base64
            try:
                base64.b64decode(img_base64)
                print("‚úÖ Base64 –≤–∞–ª–∏–¥–Ω—ã–π")
            except Exception as e:
                print(f"‚ùå Base64 –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π: {e}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            
    finally:
        if os.path.exists(tmp_path):
            os.remove(tmp_path)


def test_read_image_file():
    """–¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ read_file."""
    print("\n=== –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ read_file ===")
    
    with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp:
        tmp_path = tmp.name
    
    try:
        if not create_test_image(tmp_path, size=(200, 200), color=(255, 128, 0)):
            print("‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω (Pillow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
            return
        
        # –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ read_file
        result = tools.read_file(tmp_path)
        
        if "–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï:" in result:
            print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ")
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {result[:200]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ IMAGE_DATA
            if "[IMAGE_DATA:" in result:
                print("‚úÖ IMAGE_DATA –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ")
            else:
                print("‚ùå IMAGE_DATA –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ")
        else:
            print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç: {result[:200]}")
            
    finally:
        if os.path.exists(tmp_path):
            os.remove(tmp_path)


def test_read_pdf_file():
    """–¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è PDF —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ read_file."""
    print("\n=== –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è PDF —á–µ—Ä–µ–∑ read_file ===")
    
    with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as tmp:
        tmp_path = tmp.name
    
    try:
        create_test_pdf(tmp_path)
        
        # –ß–∏—Ç–∞–µ–º PDF —á–µ—Ä–µ–∑ read_file
        result = tools.read_file(tmp_path)
        
        if "PDF –î–û–ö–£–ú–ï–ù–¢:" in result:
            print("‚úÖ PDF —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤): {result[:300]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PAGE_X_IMAGE_DATA
            if "PAGE_" in result and "IMAGE_DATA:" in result:
                print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü—ã PDF –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            else:
                print("‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü—ã PDF –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã)")
        else:
            print(f"‚ö†Ô∏è PDF –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç: {result[:200]}")
            
    finally:
        if os.path.exists(tmp_path):
            os.remove(tmp_path)


def test_read_text_file():
    """–¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)."""
    print("\n=== –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å) ===")
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False) as tmp:
        tmp.write("Test content\nLine 2\nLine 3")
        tmp_path = tmp.name
    
    try:
        result = tools.read_file(tmp_path)
        
        if result == "Test content\nLine 2\nLine 3":
            print("‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —á–∏—Ç–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print(f"‚ùå –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {result}")
            
    finally:
        if os.path.exists(tmp_path):
            os.remove(tmp_path)


def test_token_counting_with_images():
    """–¢–µ—Å—Ç –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏."""
    print("\n=== –¢–µ—Å—Ç –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ ===")
    
    # –ú–æ–∫–∏—Ä—É–µ–º LLM –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤
    class MockLLM:
        def tokenize(self, text):
            # –ü—Ä–æ—Å—Ç–æ–π –º–æ–∫: 1 —Ç–æ–∫–µ–Ω = 4 —Å–∏–º–≤–æ–ª–∞
            return [0] * (len(text) // 4)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ContextManager
    from context_manager import ContextManager
    
    llm = MockLLM()
    ctx_manager = ContextManager(llm)
    
    # –¢–µ–∫—Å—Ç –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    text1 = "This is a simple text without images"
    tokens1 = ctx_manager.count_tokens(text1)
    print(f"–¢–µ–∫—Å—Ç –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(text1)} —Å–∏–º–≤–æ–ª–æ–≤ ‚Üí {tokens1} —Ç–æ–∫–µ–Ω–æ–≤")
    
    # –¢–µ–∫—Å—Ç —Å –æ–¥–Ω–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    text2 = "Text before [IMAGE_DATA:base64encodedstring] text after"
    tokens2 = ctx_manager.count_tokens(text2)
    print(f"–¢–µ–∫—Å—Ç —Å 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: {len(text2)} —Å–∏–º–≤–æ–ª–æ–≤ ‚Üí {tokens2} —Ç–æ–∫–µ–Ω–æ–≤")
    
    # –¢–µ–∫—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    text3 = "Image 1: [IMAGE_DATA:data1] Image 2: [PAGE_2_IMAGE_DATA:data2]"
    tokens3 = ctx_manager.count_tokens(text3)
    print(f"–¢–µ–∫—Å—Ç —Å 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {len(text3)} —Å–∏–º–≤–æ–ª–æ–≤ ‚Üí {tokens3} —Ç–æ–∫–µ–Ω–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è
    if tokens2 > tokens1:
        print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ –ø–æ–¥—Å—á–µ—Ç–µ —Ç–æ–∫–µ–Ω–æ–≤")
    else:
        print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ –ø–æ–¥—Å—á–µ—Ç–µ —Ç–æ–∫–µ–Ω–æ–≤")


if __name__ == "__main__":
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ PDF\n")
    
    test_image_optimization()
    test_read_image_file()
    test_read_pdf_file()
    test_read_text_file()
    test_token_counting_with_images()
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
