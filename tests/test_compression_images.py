"""
–¢–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–∂–∞—Ç–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
"""
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent))

from compression import compress_block_on_overflow, _compress_images_in_message


class MockLLM:
    """–ú–æ–∫ LLM –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    
    def create_chat_completion(self, messages, max_tokens=256, temperature=0.2):
        """–ú–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—é–º–µ."""
        content = messages[0]['content']
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
        summary = "–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ: " + content[:100] + "..."
        return {
            'choices': [{
                'message': {'content': summary}
            }]
        }


def test_compress_images_in_message():
    """–¢–µ—Å—Ç —Å–∂–∞—Ç–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏."""
    print("\n=== –¢–µ—Å—Ç —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ ===")
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    content = """
    Text before images
    [IMAGE_DATA:base64data1]
    [IMAGE_DATA:base64data2]
    [PAGE_3_IMAGE_DATA:base64data3]
    [IMAGE_DATA:base64data4]
    [IMAGE_DATA:base64data5]
    Text after images
    """
    
    # –°–∂–∏–º–∞–µ–º –¥–æ 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    compressed = _compress_images_in_message(content, max_images=2)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    import re
    image_pattern = r'\[(?:PAGE_\d+_)?IMAGE_DATA:[^\]]+\]'
    images_after = re.findall(image_pattern, compressed)
    
    print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ —Å–∂–∞—Ç–∏—è: 5")
    print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è: {len(images_after)}")
    
    if len(images_after) == 2:
        print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∂–∞—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–æ 2")
    else:
        print(f"‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–æ {len(images_after)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
    if "–£–¥–∞–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π" in compressed:
        print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    else:
        print("‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")


def test_compress_block_on_overflow():
    """–¢–µ—Å—Ç —Å–∂–∞—Ç–∏—è –±–ª–æ–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏."""
    print("\n=== –¢–µ—Å—Ç —Å–∂–∞—Ç–∏—è –±–ª–æ–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏ ===")
    
    llm = MockLLM()
    
    # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–π –±–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    large_text = "Very long observation text. " * 100  # ~2800 —Å–∏–º–≤–æ–ª–æ–≤
    content = f"""
    Observation: {large_text}
    [IMAGE_DATA:verylongbase64string1]
    [IMAGE_DATA:verylongbase64string2]
    [IMAGE_DATA:verylongbase64string3]
    [IMAGE_DATA:verylongbase64string4]
    """
    
    print(f"–†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ –¥–æ —Å–∂–∞—Ç–∏—è: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –°–∂–∏–º–∞–µ–º –±–ª–æ–∫ –¥–æ 2048 —Ç–æ–∫–µ–Ω–æ–≤ (~8192 —Å–∏–º–≤–æ–ª–∞)
    compressed = compress_block_on_overflow(
        block_content=content,
        llm=llm,
        max_tokens=2048,
        preserve_images=True
    )
    
    print(f"–†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ –ø–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è: {len(compressed)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–º–µ—Ä —É–º–µ–Ω—å—à–∏–ª—Å—è
    if len(compressed) < len(content):
        reduction = ((len(content) - len(compressed)) / len(content)) * 100
        print(f"‚úÖ –ë–ª–æ–∫ —Å–∂–∞—Ç: {reduction:.1f}% —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ")
    else:
        print("‚ùå –ë–ª–æ–∫ –Ω–µ —Å–∂–∞—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    import re
    image_pattern = r'\[(?:PAGE_\d+_)?IMAGE_DATA:[^\]]+\]'
    images_after = re.findall(image_pattern, compressed)
    
    print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è: {len(images_after)} (–º–∞–∫—Å. 3)")
    
    if len(images_after) <= 3:
        print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –¥–æ 3")
    else:
        print(f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(images_after)}")


def test_compress_block_without_images():
    """–¢–µ—Å—Ç —Å–∂–∞—Ç–∏—è –±–ª–æ–∫–∞ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)."""
    print("\n=== –¢–µ—Å—Ç —Å–∂–∞—Ç–∏—è –±–ª–æ–∫–∞ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ===")
    
    llm = MockLLM()
    
    # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–π –±–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞ –ë–ï–ó –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    large_text = "Observation: This is a very long text. " * 200  # ~8000 —Å–∏–º–≤–æ–ª–æ–≤
    
    print(f"–†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ –¥–æ —Å–∂–∞—Ç–∏—è: {len(large_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –°–∂–∏–º–∞–µ–º –±–ª–æ–∫
    compressed = compress_block_on_overflow(
        block_content=large_text,
        llm=llm,
        max_tokens=1024,
        preserve_images=True
    )
    
    print(f"–†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ –ø–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è: {len(compressed)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∂–∞—Ç–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ —á–µ—Ä–µ–∑ LLM
    if "–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ:" in compressed:
        print("‚úÖ –¢–µ–∫—Å—Ç —Å–∂–∞—Ç —á–µ—Ä–µ–∑ LLM")
    else:
        print("‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ —Å–∂–∞—Ç —á–µ—Ä–µ–∑ LLM (–≤–æ–∑–º–æ–∂–Ω–æ, –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–¥—Ö–æ–¥—è—â–∏–π)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    import re
    image_pattern = r'\[(?:PAGE_\d+_)?IMAGE_DATA:[^\]]+\]'
    images = re.findall(image_pattern, compressed)
    
    if len(images) == 0:
        print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç (–∫–∞–∫ –æ–∂–∏–¥–∞–ª–æ—Å—å)")
    else:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –Ω–∞–π–¥–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(images)}")


def test_compress_block_remove_all_images():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–∏ preserve_images=False."""
    print("\n=== –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ===")
    
    llm = MockLLM()
    
    content = """
    Some text
    [IMAGE_DATA:data1]
    [IMAGE_DATA:data2]
    [PAGE_3_IMAGE_DATA:data3]
    More text
    """
    
    # –°–∂–∏–º–∞–µ–º —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    compressed = compress_block_on_overflow(
        block_content=content,
        llm=llm,
        max_tokens=1024,
        preserve_images=False  # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    import re
    image_pattern = r'\[(?:PAGE_\d+_)?IMAGE_DATA:[^\]]+\]'
    images = re.findall(image_pattern, compressed)
    
    print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è: {len(images)}")
    
    if len(images) == 0:
        print("‚úÖ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã")
    else:
        print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å—Ç–∞–ª–∏—Å—å: {len(images)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if "–£–¥–∞–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π" in compressed:
        print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")


if __name__ == "__main__":
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Å–∂–∞—Ç–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n")
    
    test_compress_images_in_message()
    test_compress_block_on_overflow()
    test_compress_block_without_images()
    test_compress_block_remove_all_images()
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Å–∂–∞—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
