# context_manager.py
import logging
from typing import List, Dict, Optional, Tuple

logger = logging.getLogger(__name__)

class ContextManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –ö–æ–Ω—Ç–µ–∫—Å—Ç–∞ (Context Manager).
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–±–æ—Ä–∫—É —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è LLM, —É–ø—Ä–∞–≤–ª—è—è —Ç–µ–º, –∫–∞–∫–∞—è
    –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ø–∞–º—è—Ç–∏ (L1, L2, L3) –ø–æ–ø–∞–¥–µ—Ç –≤
    –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –æ–∫–Ω–æ –º–æ–¥–µ–ª–∏.
    
    –£—Ä–æ–≤–Ω–∏ –ø–∞–º—è—Ç–∏:
    - L1 (–†–∞–±–æ—á–∞—è –ø–∞–º—è—Ç—å): –¢–µ–∫—É—â–∏–π scratchpad (–ø–ª–∞–Ω, —Ü–µ–ª—å, –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ)
    - L2 (–≠–ø–∏–∑–æ–¥–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å): –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    - L3 (–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å): –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å (–≥–ª–æ–±–∞–ª—å–Ω–∞—è + –ø—Ä–æ–µ–∫—Ç–Ω–∞—è)
    """
    
    def __init__(self, llm, global_memory=None, project_memory=None, max_tokens=24576):
        self.llm = llm
        self.global_memory = global_memory  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å (shared)
        self.project_memory = project_memory  # –ü—Ä–æ–µ–∫—Ç–Ω–∞—è –ø–∞–º—è—Ç—å (per-chat)
        self.max_tokens = max_tokens  # v3.3.1: –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 20480 –¥–æ 24576 (RTX 4060: 61% ‚Üí ~72% VRAM)
        
        # –ù–û–í–´–ô –ü–û–î–•–û–î: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –≤–º–µ—Å—Ç–æ –∂—ë—Å—Ç–∫–∏—Ö –ª–∏–º–∏—Ç–æ–≤
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1 (–∫—Ä–∏—Ç–∏—á–Ω–æ, –Ω–µ–ª—å–∑—è –æ–±—Ä–µ–∑–∞—Ç—å): system_prompt, scratchpad
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2 (–≤–∞–∂–Ω–æ): –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3 (–º–æ–∂–Ω–æ –æ–±—Ä–µ–∑–∞—Ç—å): –∏—Å—Ç–æ—Ä–∏—è
        
        self.token_priorities = {
            'system_prompt': {'priority': 1, 'min': 0.10, 'max': 0.20},  # 10-20%
            'l1_scratchpad': {'priority': 1, 'min': 0.05, 'max': 0.15},  # 5-15%
            'l3_memory':     {'priority': 2, 'min': 0.10, 'max': 0.30},  # 10-30%
            'l2_history':    {'priority': 3, 'min': 0.30, 'max': 0.70},  # 30-70%
            'reserve':       {'priority': 4, 'min': 0.05, 'max': 0.10}   # 5-10%
        }
        
        # –°—Ç–∞—Ä—ã–µ –±—é–¥–∂–µ—Ç—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–∞–∫ —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
        self.token_budget = {
            'system_prompt': 0.15,
            'l1_scratchpad': 0.10,
            'l3_memory': 0.20,
            'l2_history': 0.50,
            'reserve': 0.05
        }
    
    def count_tokens(self, text: str) -> int:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ."""
        if not text:
            return 0
        try:
            return len(self.llm.tokenize(text.encode('utf-8')))
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É")
            return int(len(text.split()) * 1.3)  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    
    def build_context(
        self,
        system_prompt: str,
        scratchpad: Dict,
        history: List[Dict],
        current_query: str
    ) -> Tuple[List[Dict], Dict, str]:
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM —Å –ê–î–ê–ü–¢–ò–í–ù–´–ú —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–æ–≤.
        
        –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞:
        1. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1 (–∫—Ä–∏—Ç–∏—á–Ω–æ): system_prompt, scratchpad - –ù–ï –æ–±—Ä–µ–∑–∞—é—Ç—Å—è
        2. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2 (–≤–∞–∂–Ω–æ): L3 –ø–∞–º—è—Ç—å - –∞–¥–∞–ø—Ç–∏–≤–Ω–æ —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Å—Ç–æ
        3. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3 (–≥–∏–±–∫–æ): L2 –∏—Å—Ç–æ—Ä–∏—è - –ø–æ–ª—É—á–∞–µ—Ç –í–°–Å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –º–µ—Å—Ç–æ
        4. –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: —Å–≤–æ–±–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –æ—Ç–¥–∞—é—Ç—Å—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
        
        Args:
            system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            scratchpad: –†–∞–±–æ—á–∞—è –ø–∞–º—è—Ç—å (–ø–ª–∞–Ω, —Ü–µ–ª—å, –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ)
            history: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
            current_query: –¢–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Tuple[–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —É–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç]
        """
        stats = {
            'total_tokens': 0,
            'system_tokens': 0,
            'scratchpad_tokens': 0,
            'memory_tokens': 0,
            'history_tokens': 0,
            'trimmed_messages': 0,
            'budget_redistribution': {}  # –ù–æ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞
        }
        
        # === –®–ê–ì 1: –ü–æ–¥—Å—á—ë—Ç –ö–†–ò–¢–ò–ß–ù–´–• –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1) ===
        
        # 1.1 –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–ù–ï–õ–¨–ó–Ø –æ–±—Ä–µ–∑–∞—Ç—å)
        system_tokens = self.count_tokens(system_prompt)
        stats['system_tokens'] = system_tokens
        
        # 1.2 Scratchpad (–ù–ï–õ–¨–ó–Ø –æ–±—Ä–µ–∑–∞—Ç—å - —Ç–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞)
        scratchpad_context = self._build_scratchpad_context(scratchpad)
        scratchpad_tokens = self.count_tokens(scratchpad_context)
        stats['scratchpad_tokens'] = scratchpad_tokens
        
        # === –®–ê–ì 2: –†–∞—Å—á—ë—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ ===
        
        critical_tokens = system_tokens + scratchpad_tokens
        reserve_tokens = int(self.max_tokens * self.token_priorities['reserve']['min'])
        available_tokens = self.max_tokens - critical_tokens - reserve_tokens
        
        logger.debug(f"–ö—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {critical_tokens}, –¥–æ—Å—Ç—É–ø–Ω–æ: {available_tokens}/{self.max_tokens}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        if critical_tokens > self.max_tokens * 0.5:
            logger.warning(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–Ω–∏–º–∞—é—Ç {critical_tokens} —Ç–æ–∫–µ–Ω–æ–≤ (>{self.max_tokens*0.5})")
        
        # === –®–ê–ì 3: –ê–î–ê–ü–¢–ò–í–ù–û–ï —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2) ===
        
        # –¶–µ–ª–µ–≤–æ–π –±—é–¥–∂–µ—Ç –¥–ª—è L3 (20% –æ—Ç total)
        target_memory_budget = int(self.max_tokens * self.token_budget['l3_memory'])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–º—è—Ç—å —Å –ê–î–ê–ü–¢–ò–í–ù–´–ú –ª–∏–º–∏—Ç–æ–º
        memory_context, actual_memory_tokens = self._build_memory_context_adaptive(
            query=current_query,
            scratchpad=scratchpad,
            target_budget=target_memory_budget,
            max_budget=int(self.max_tokens * self.token_priorities['l3_memory']['max'])
        )
        
        stats['memory_tokens'] = actual_memory_tokens
        stats['budget_redistribution']['l3_saved'] = target_memory_budget - actual_memory_tokens
        
        # === –®–ê–ì 4: –ì–ò–ë–ö–û–ï —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3) ===
        
        # –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—É—á–∞–µ—Ç –í–°–Å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –º–µ—Å—Ç–æ
        used_tokens = critical_tokens + actual_memory_tokens
        history_budget = available_tokens - actual_memory_tokens
        
        # –ù–æ –Ω–µ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞ (30% –æ—Ç total)
        min_history_budget = int(self.max_tokens * self.token_priorities['l2_history']['min'])
        if history_budget < min_history_budget:
            logger.warning(f"‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—É—á–∏–ª–∞ {history_budget} —Ç–æ–∫–µ–Ω–æ–≤ < –º–∏–Ω–∏–º—É–º–∞ {min_history_budget}")
            # –£—Ä–µ–∑–∞–µ–º –ø–∞–º—è—Ç—å –≤ –ø–æ–ª—å–∑—É –∏—Å—Ç–æ—Ä–∏–∏
            memory_reduction = min_history_budget - history_budget
            history_budget = min_history_budget
            logger.info(f"üîÑ –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: -{memory_reduction} –∏–∑ L3 ‚Üí +{memory_reduction} –≤ L2")
            stats['budget_redistribution']['l3_to_l2'] = memory_reduction
        
        logger.debug(f"üìä –ë—é–¥–∂–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏: {history_budget} —Ç–æ–∫–µ–Ω–æ–≤ ({history_budget/self.max_tokens*100:.1f}%)")
        
        # –û–±—Ä–µ–∑–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–¥ –±—é–¥–∂–µ—Ç
        trimmed_history = self._trim_history(history, history_budget)
        history_tokens = sum(self.count_tokens(msg.get('content', '')) for msg in trimmed_history)
        stats['history_tokens'] = history_tokens
        stats['trimmed_messages'] = len(history) - len(trimmed_history)
        
        # –°–≤–æ–±–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã (–µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∞ –≤–µ—Å—å –±—é–¥–∂–µ—Ç)
        free_tokens = history_budget - history_tokens
        if free_tokens > 100:
            stats['budget_redistribution']['unused'] = free_tokens
            logger.debug(f"üí° –°–≤–æ–±–æ–¥–Ω–æ {free_tokens} —Ç–æ–∫–µ–Ω–æ–≤ ({free_tokens/self.max_tokens*100:.1f}%)")
        
        # === –®–ê–ì 5: –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç ===
        
        context_parts = []
        
        if memory_context:
            context_parts.append(f"–î–û–õ–ì–û–°–†–û–ß–ù–ê–Ø –ü–ê–ú–Ø–¢–¨:\n{memory_context}\n")
        
        if scratchpad_context:
            context_parts.append(f"{scratchpad_context}\n")
        
        full_context = "---\n\n" + "\n".join(context_parts) if context_parts else ""
        enhanced_system_prompt = system_prompt + "\n" + full_context
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
        optimized_history = []
        for msg in trimmed_history:
            optimized_history.append(msg)
        
        stats['total_tokens'] = used_tokens + history_tokens
        stats['utilization'] = (stats['total_tokens'] / self.max_tokens) * 100
        
        logger.debug(f"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–±—Ä–∞–Ω: {stats['total_tokens']}/{self.max_tokens} —Ç–æ–∫–µ–Ω–æ–≤ ({stats['utilization']:.1f}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ)")
        
        return optimized_history, stats, enhanced_system_prompt
    
    def _build_scratchpad_context(self, scratchpad: Dict) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Ä–∞–±–æ—á–µ–π –ø–∞–º—è—Ç–∏ (scratchpad)."""
        parts = []
        
        if scratchpad.get('main_goal'):
            parts.append(f"–¢–ï–ö–£–©–ê–Ø –ó–ê–î–ê–ß–ê: {scratchpad['main_goal']}")
        
        if scratchpad.get('plan'):
            parts.append(f"–¢–ï–ö–£–©–ò–ô –ü–õ–ê–ù:\n{scratchpad['plan']}")
        
        if scratchpad.get('last_action_result'):
            parts.append(f"–ü–û–°–õ–ï–î–ù–ï–ï –î–ï–ô–°–¢–í–ò–ï: {scratchpad['last_action_result'][:200]}...")
        
        return "\n\n".join(parts) if parts else ""
    
    def _build_memory_context(self, query: str, scratchpad: Dict) -> str:
        """–£–°–¢–ê–†–ï–í–®–ò–ô –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç _build_memory_context_adaptive."""
        context, _ = self._build_memory_context_adaptive(
            query=query,
            scratchpad=scratchpad,
            target_budget=int(self.max_tokens * 0.20),
            max_budget=int(self.max_tokens * 0.30)
        )
        return context
    
    def _build_memory_context_adaptive(
        self, 
        query: str, 
        scratchpad: Dict, 
        target_budget: int,
        max_budget: int
    ) -> Tuple[str, int]:
        """
        –ê–î–ê–ü–¢–ò–í–ù–û –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏.
        
        –õ–æ–≥–∏–∫–∞:
        1. –ù–∞—á–∏–Ω–∞–µ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ k (Top-2 global, Top-3 project)
        2. –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–æ–≤ < target_budget –ò –ø–∞–º—è—Ç—å –Ω–µ –ø—É—Å—Ç–∞—è ‚Üí —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º k
        3. –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–æ–≤ > max_budget ‚Üí —É–º–µ–Ω—å—à–∞–µ–º –∑–∞–ø–∏—Å–∏
        4. –í–æ–∑–≤—Ä–∞—â–∞–µ–º (–∫–æ–Ω—Ç–µ–∫—Å—Ç, —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤)
        """
        parts = []
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        search_query = query
        if scratchpad.get('main_goal'):
            search_query = f"{scratchpad['main_goal']} {query}"
        
        # === –ê–î–ê–ü–¢–ò–í–ù–´–ô –ø–æ–∏—Å–∫ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏ ===
        global_results = []
        if self.global_memory:
            # –ù–∞—á–∏–Ω–∞–µ–º —Å k=2, –º–æ–∂–µ–º —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–æ k=5
            k_global = 2
            global_results = self.global_memory.search(search_query, k=k_global)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Ç–æ–∫–µ–Ω–æ–≤ –º–∞–ª–æ - —Ä–∞—Å—à–∏—Ä—è–µ–º
            current_tokens = self.count_tokens("\n".join(global_results))
            if global_results and current_tokens < target_budget * 0.4:  # 40% –æ—Ç target –¥–ª—è global
                k_global = min(5, len(global_results) + 3)
                global_results = self.global_memory.search(search_query, k=k_global)
                logger.debug(f"üîÑ –†–∞—Å—à–∏—Ä–∏–ª–∏ global memory: k={k_global}")
        
        if global_results:
            parts.append("üìö –û–±—â–∏–µ –∑–Ω–∞–Ω–∏—è:")
            for i, result in enumerate(global_results, 1):
                # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –¥–ª–∏–Ω–∞: –µ—Å–ª–∏ –º–µ—Å—Ç–∞ –º–∞–ª–æ - –∫–æ—Ä–æ—á–µ
                max_len = 150 if len(global_results) <= 3 else 100
                parts.append(f"  {i}. {result[:max_len]}...")
        
        # === –ê–î–ê–ü–¢–ò–í–ù–´–ô –ø–æ–∏—Å–∫ –≤ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –ø–∞–º—è—Ç–∏ ===
        project_results = []
        if self.project_memory:
            k_project = 3
            project_results = self.project_memory.search(search_query, k=k_project)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Ç–æ–∫–µ–Ω–æ–≤ –º–∞–ª–æ - —Ä–∞—Å—à–∏—Ä—è–µ–º
            current_tokens = self.count_tokens("\n".join(parts))
            if project_results and current_tokens < target_budget * 0.6:  # 60% –æ—Ç target –¥–ª—è project
                k_project = min(7, len(project_results) + 4)
                project_results = self.project_memory.search(search_query, k=k_project)
                logger.debug(f"üîÑ –†–∞—Å—à–∏—Ä–∏–ª–∏ project memory: k={k_project}")
        
        if project_results:
            parts.append("\nüî¨ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞:")
            for i, result in enumerate(project_results, 1):
                max_len = 150 if len(project_results) <= 4 else 100
                parts.append(f"  {i}. {result[:max_len]}...")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = "\n".join(parts) if parts else ""
        actual_tokens = self.count_tokens(context)
        
        # === –û–ë–†–ï–ó–ö–ê –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω max_budget ===
        if actual_tokens > max_budget:
            logger.warning(f"‚ö†Ô∏è –ü–∞–º—è—Ç—å –ø—Ä–µ–≤—ã—Å–∏–ª–∞ max_budget: {actual_tokens} > {max_budget}")
            # –û–±—Ä–µ–∑–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (–æ–Ω–∏ –º–µ–Ω–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã)
            while actual_tokens > max_budget and len(parts) > 5:
                parts.pop()  # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
                context = "\n".join(parts)
                actual_tokens = self.count_tokens(context)
                logger.debug(f"üîÑ –û–±—Ä–µ–∑–∞–ª–∏ –ø–∞–º—è—Ç—å –¥–æ {actual_tokens} —Ç–æ–∫–µ–Ω–æ–≤")
        
        logger.debug(f"üíæ L3 –ø–∞–º—è—Ç—å: {actual_tokens}/{target_budget} —Ç–æ–∫–µ–Ω–æ–≤ (target), {len(global_results)+len(project_results)} –∑–∞–ø–∏—Å–µ–π")
        
        return context, actual_tokens
    
    def _trim_history(self, history: List[Dict], token_budget: int) -> List[Dict]:
        """
        –£–º–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤–∞–∂–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
        
        –°—Ç—Ä–∞—Ç–µ–≥–∏—è:
        1. –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–≤–µ–∂–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç)
        2. –ò–∑ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∞—Ç –≤–∞–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        """
        if not history:
            return []
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã —Å –∫–æ–Ω—Ü–∞
        trimmed = []
        current_tokens = 0
        
        # –°–Ω–∞—á–∞–ª–∞ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ)
        for msg in reversed(history):
            msg_tokens = self.count_tokens(msg.get('content', ''))
            if current_tokens + msg_tokens <= token_budget:
                trimmed.insert(0, msg)
                current_tokens += msg_tokens
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ
                if msg_tokens > token_budget * 0.3:  # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 30% –±—é–¥–∂–µ—Ç–∞
                    shortened_content = msg.get('content', '')[:500] + "..."
                    shortened_msg = msg.copy()
                    shortened_msg['content'] = shortened_content
                    trimmed.insert(0, shortened_msg)
                break
        
        return trimmed
    
    def get_context_stats(self, history: List[Dict], system_prompt: str = "") -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
        total_tokens = sum(self.count_tokens(msg.get('content', '')) for msg in history)
        if system_prompt:
            total_tokens += self.count_tokens(system_prompt)
        
        return {
            'total_tokens': total_tokens,
            'max_tokens': self.max_tokens,
            'usage_percent': (total_tokens / self.max_tokens) * 100,
            'messages_count': len(history),
            'available_tokens': self.max_tokens - total_tokens
        }
